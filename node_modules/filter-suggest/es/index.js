var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Downshift from 'downshift';
import TextField, { HelperText, Input } from '@material/react-text-field';
import List, { ListItem, ListItemGraphic, ListItemText, ListItemMeta } from '@material/react-list';
import { CircularProgress } from '@rmwc/circular-progress';
import '@rmwc/circular-progress/circular-progress.css';

var FilterSuggest = function FilterSuggest(_ref) {
  var className = _ref.className,
      errorMessage = _ref.errorMessage,
      inputValue = _ref.inputValue,
      items = _ref.items,
      label = _ref.label,
      leadingIcon = _ref.leadingIcon,
      loading = _ref.loading,
      maxSuggestions = _ref.maxSuggestions,
      menuClassName = _ref.menuClassName,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      _onInputValueChange = _ref.onInputValueChange,
      onSelect = _ref.onSelect,
      outlined = _ref.outlined,
      textFieldClassName = _ref.textFieldClassName;

  return React.createElement(
    Downshift,
    {
      selectedItem: null,
      inputValue: inputValue,
      onInputValueChange: function onInputValueChange(x) {
        return _onInputValueChange(x || '');
      },
      itemToString: function itemToString(item) {
        return item ? item.primary : '';
      },
      defaultHighlightedIndex: 0,
      onStateChange: function onStateChange(changes, downshift) {
        if (changes.hasOwnProperty('selectedItem')) {
          if (changes.selectedItem.primary) {
            return onSelect(changes.selectedItem);
          }
          return downshift.openMenu();
        }
        if (changes.type === Downshift.stateChangeTypes.changeInput) {
          if (downshift.highlightedIndex !== 0) {
            downshift.setHighlightedIndex(0);
          }
        }
      }
    },
    function (_ref2) {
      var getInputProps = _ref2.getInputProps,
          getItemProps = _ref2.getItemProps,
          getLabelProps = _ref2.getLabelProps,
          getMenuProps = _ref2.getMenuProps,
          isOpen = _ref2.isOpen,
          inputValue = _ref2.inputValue,
          highlightedIndex = _ref2.highlightedIndex,
          setHighlightedIndex = _ref2.setHighlightedIndex,
          selectedItem = _ref2.selectedItem;

      var classNames = [];
      if (className) {
        classNames.push(className);
      }
      if (outlined) {
        classNames.push('fs-outlined');
      }
      if (isOpen && items.length) {
        classNames.push('fs-open');
      }
      return React.createElement(
        'div',
        { className: classNames.join(' ') },
        React.createElement(
          TextField,
          {
            outlined: outlined,
            className: 'fs-search-text-field ' + (textFieldClassName || ''),
            helperText: errorMessage ? React.createElement(
              HelperText,
              null,
              React.createElement(
                'span',
                { style: { color: 'red' } },
                errorMessage
              )
            ) : null,
            label: label,
            leadingIcon: leadingIcon ? leadingIcon : undefined,
            trailingIcon: loading ? React.createElement(CircularProgress, null) : undefined
          },
          React.createElement(Input, _extends({}, getInputProps(), {
            className: 'fs-search-input',
            type: 'search',
            'data-lpignore': true,
            onBlur: onBlur,
            onFocus: onFocus
          }))
        ),
        !errorMessage && isOpen && items.length > 0 ? React.createElement(
          'div',
          {
            style: { position: 'relative' }
          },
          React.createElement(
            'div',
            _extends({}, getMenuProps(), {
              className: 'fs-filter-menu ' + (menuClassName || '')
            }),
            React.createElement(
              List,
              { twoLine: true },
              items.slice(0, maxSuggestions).map(function (item, index) {
                return React.createElement(
                  ListItem,
                  _extends({}, getItemProps({ item: item }), {
                    key: item.id,
                    selected: highlightedIndex === index,
                    activated: false
                  }),
                  item.icon ? React.createElement(ListItemGraphic, { graphic: item.icon }) : React.createElement('span', null),
                  React.createElement(ListItemText, { primaryText: item.primary, secondaryText: item.secondary || ' ' }),
                  React.createElement(ListItemMeta, { meta: highlightedIndex === index ? 'Enter' : ' ' })
                );
              })
            )
          )
        ) : null
      );
    }
  );
};
FilterSuggest.propTypes = process.env.NODE_ENV !== "production" ? {
  className: PropTypes.string,
  errorMessage: PropTypes.string,
  inputValue: PropTypes.string.isRequired,
  items: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string.isRequired,
    icon: PropTypes.element,
    primary: PropTypes.string.isRequired,
    secondary: PropTypes.string
  })).isRequired,
  label: PropTypes.string,
  leadingIcon: PropTypes.element,
  loading: PropTypes.bool,
  maxSuggestions: PropTypes.number,
  menuClassName: PropTypes.string,
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  onInputValueChange: PropTypes.func.isRequired,
  onSelect: PropTypes.func.isRequired,
  outlined: PropTypes.bool,
  textFieldClassName: PropTypes.string
} : {};
FilterSuggest.defaultProps = {
  label: 'Start typing...',
  maxSuggestions: 12
};

export default FilterSuggest;

export { HelperText, Input, TextField };